# https://www.gitpod.io/docs/references/gitpod-yml
github:
  prebuilds:
    # enable for the default branch (defaults to true)
    master: true
    # enable for all branches in this repo (defaults to false)
    branches: false
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: false
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: false
    # add a check to pull requests (defaults to true)
    addCheck: false
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: false
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false

# https://www.gitpod.io/docs/config-docker
# https://hub.docker.com/u/gitpod/
image:
  file: .gitpod.Dockerfile

# Each array element opens in its own terminal.
# before: runs every time and needs to end
# init: runs during prebuild only and needs to end
# command: runs last on every start and does not need to end
# env: env variable available in the workspace
# openMode: tab-after, tab-before, split-right, split-left
# https://www.gitpod.io/docs/command-line-interface
# gp await-port 3000 && gp preview $(gp url 3000)/my/path/index.html
# gp open <filename>
# gp env API_ENDPOINT=https://api.example.com
tasks:
  - name: Restore & Build
    init: |
      dotnet restore
      dotnet build
    command: |
      gp open Program.cs
      dotnet run
    openMode: tab-after
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

gitConfig:
  color.diff: "always"
  color.status: "always"
  color.branch: "always"
  color.interactive: "always"
  rebase.autosquash: "true"
  rerere.enabled: "false"
  pull.rebase: "true"
  alias.alias: "config --get-regexp alias"
  alias.getmr: "!sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -"
  alias.suba: "submodule add"
  alias.subinit: "submodule update --init --recursive"
  alias.prunetags: "!git tag -l | xargs git tag -d && git fetch -t"
  alias.amend: "commit --amend"
  alias.amendf: "commit --amend --no-edit"
  alias.aap: "!git aa && git amendf && git pf"
  alias.aaps: "!git aa && git amendf && git pfs"
  alias.changed: "status -sb"
  alias.filelog: "log -u"
  alias.hist: "log --graph --pretty: format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) [%an]%Creset' --abbrev-commit --date: relative"
  alias.lolfromlasttag: "log --graph --decorate --pretty: oneline --abbrev-commit --left-right $(git tag --sort: '-*authordate' | head -n 1)..HEAD"
  alias.lol: "log --graph --decorate --pretty: oneline --abbrev-commit --left-right"
  alias.lola: "log --graph --decorate --pretty: oneline --abbrev-commit --all --left-right"
  alias.logpush: "!git --no-pager log origin/$(git currentbranch)..HEAD --oneline"
  alias.logpull: "!git --no-pager log HEAD..origin/$(git currentbranch) --oneline"
  alias.whatsnew: "!git diff origin/$(git currentbranch)...HEAD"
  alias.whatscoming: "!git diff HEAD...origin/$(git currentbranch)"
  alias.shallowclone: "clone --single-branch --depth 1"
  alias.bl: "blame -w -M -C"
  alias.p: "!git push origin"
  alias.pu: "!git push origin -u $(git currentbranch)"
  alias.pf: "push origin --force-with-lease"
  alias.puf: "!git push origin --force-with-lease -u $(git currentbranch)"
  alias.pfs: "push origin --force-with-lease -o ci.skip"
  alias.pufs: "!git push origin --force-with-lease -u $(git currentbranch) -o ci.skip"
  alias.pt: "push origin --tags"
  alias.f: "fetch"
  alias.ft: "fetch --tags"
  alias.fpt: "![ -f .git/shallow ] && (sed -i 's|+refs/heads/master:refs/remotes/origin/master|+refs/heads/*:refs/remotes/origin/*|' .git/config && git fetch --prune --prune-tags --tags --unshallow) || git fetch --prune --prune-tags --tags"
  alias.pullalldir: "!find . -maxdepth 3 -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {} pull"
  alias.pullalldirr: "!find . -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {} pull"
  alias.foreachsubdir: "!find . -maxdepth 3 -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {}"
  alias.foreachsubdirr: "!find . -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {}"
  alias.s: "status -sbu"
  alias.st: "status"
  alias.stp: "status --porcelain"
  alias.signored: "status --ignored"
  alias.ci: "commit"
  alias.br: "branch"
  alias.brav: "branch -avv"
  alias.brv: "branch -vv"
  alias.branches: "branch -rav"
  alias.brdeleteall: "!git branch --color: never | grep -v \"^\\*\" | xargs git branch -D"
  alias.brlistunmergedrel: "!git branch -a -v --no-merged $(git currentbranch) | grep rel"
  alias.currentbranch: "!git branch --color: never | grep \"^\\*\" | cut -d \" \" -f 2"
  alias.currentcommit: "!echo \"$(git rev-list --max-count: 1 HEAD) $(git name-rev --tags --name-only HEAD)\""
  alias.lastref: "rev-parse --short HEAD"
  alias.lasttag: "describe --tags --abbrev: 0"
  alias.remotes: "remote -v show"
  alias.undo: "reset HEAD~"
  alias.unstage: "reset HEAD"
  alias.co: "checkout"
  alias.ce: "config --edit"
  alias.ceg: "config --edit --global"
  alias.rs: "reset"
  alias.rsh: "reset --hard"
  alias.rss: "reset --soft"
  alias.resetorigin: "!git reset --hard origin/$(git currentbranch)"
  alias.ro: "!git resetorigin"
  alias.aa: "add --all"
  alias.cleand: "clean -fd"
  alias.cleanx: "clean -fdx"
  alias.pullr: "pull --rebase"
  alias.ri: "rebase -i"
  alias.rc: "rebase --continue"
  alias.ra: "rebase --abort"
  alias.mr: "merge"
  alias.mnf: "merge --no-ff"
  alias.mrc: "merge --continue"
  alias.mra: "merge --abort"
  alias.stashu: "stash push --include-untracked"
  alias.cp: "cherry-pick"

  # - before: sh ./scripts/setup.sh
  #   init: npm install
  #   command: npm run dev
  # - name: Database
  #   init: sh ./scripts/seed-database.sh
  #   command: npm start-db
  #   env:
  #     DB_HOST: localhost:3306
  #     DB_USER: readOnlyUser

# onOpen: open-browser, open-preview, notify, ignore
# ports:
#   - port: 3000
#     onOpen: open-preview
#     visibility: private

vscode:
  extensions:
    - muhammad-sammy.csharp
